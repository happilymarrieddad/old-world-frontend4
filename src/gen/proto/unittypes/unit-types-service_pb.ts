// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file proto/unittypes/unit-types-service.proto (package unittypes, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { UnitType } from "./types_pb.js";

/**
 * @generated from message unittypes.ArmyTypeIdRequest
 */
export class ArmyTypeIdRequest extends Message<ArmyTypeIdRequest> {
  /**
   * @generated from field: string JWT = 1;
   */
  JWT = "";

  /**
   * @generated from field: string armyTypeId = 2;
   */
  armyTypeId = "";

  constructor(data?: PartialMessage<ArmyTypeIdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "unittypes.ArmyTypeIdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "JWT", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "armyTypeId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ArmyTypeIdRequest {
    return new ArmyTypeIdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ArmyTypeIdRequest {
    return new ArmyTypeIdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ArmyTypeIdRequest {
    return new ArmyTypeIdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ArmyTypeIdRequest | PlainMessage<ArmyTypeIdRequest> | undefined, b: ArmyTypeIdRequest | PlainMessage<ArmyTypeIdRequest> | undefined): boolean {
    return proto3.util.equals(ArmyTypeIdRequest, a, b);
  }
}

/**
 * @generated from message unittypes.ArmyTypeIdReply
 */
export class ArmyTypeIdReply extends Message<ArmyTypeIdReply> {
  /**
   * @generated from field: repeated unittypes.UnitType unitTypes = 1;
   */
  unitTypes: UnitType[] = [];

  constructor(data?: PartialMessage<ArmyTypeIdReply>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "unittypes.ArmyTypeIdReply";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "unitTypes", kind: "message", T: UnitType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ArmyTypeIdReply {
    return new ArmyTypeIdReply().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ArmyTypeIdReply {
    return new ArmyTypeIdReply().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ArmyTypeIdReply {
    return new ArmyTypeIdReply().fromJsonString(jsonString, options);
  }

  static equals(a: ArmyTypeIdReply | PlainMessage<ArmyTypeIdReply> | undefined, b: ArmyTypeIdReply | PlainMessage<ArmyTypeIdReply> | undefined): boolean {
    return proto3.util.equals(ArmyTypeIdReply, a, b);
  }
}

/**
 * @generated from message unittypes.GetUnitTypeRequest
 */
export class GetUnitTypeRequest extends Message<GetUnitTypeRequest> {
  /**
   * @generated from field: string JWT = 1;
   */
  JWT = "";

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  constructor(data?: PartialMessage<GetUnitTypeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "unittypes.GetUnitTypeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "JWT", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUnitTypeRequest {
    return new GetUnitTypeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUnitTypeRequest {
    return new GetUnitTypeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUnitTypeRequest {
    return new GetUnitTypeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUnitTypeRequest | PlainMessage<GetUnitTypeRequest> | undefined, b: GetUnitTypeRequest | PlainMessage<GetUnitTypeRequest> | undefined): boolean {
    return proto3.util.equals(GetUnitTypeRequest, a, b);
  }
}

/**
 * @generated from message unittypes.GetUnitTypesRequest
 */
export class GetUnitTypesRequest extends Message<GetUnitTypesRequest> {
  /**
   * @generated from field: string JWT = 1;
   */
  JWT = "";

  /**
   * @generated from field: string armyTypeId = 2;
   */
  armyTypeId = "";

  /**
   * @generated from field: int64 limit = 3;
   */
  limit = protoInt64.zero;

  /**
   * @generated from field: int64 offset = 4;
   */
  offset = protoInt64.zero;

  /**
   * @generated from field: bool includeUnitTypeOptions = 5;
   */
  includeUnitTypeOptions = false;

  constructor(data?: PartialMessage<GetUnitTypesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "unittypes.GetUnitTypesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "JWT", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "armyTypeId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "limit", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "includeUnitTypeOptions", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUnitTypesRequest {
    return new GetUnitTypesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUnitTypesRequest {
    return new GetUnitTypesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUnitTypesRequest {
    return new GetUnitTypesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUnitTypesRequest | PlainMessage<GetUnitTypesRequest> | undefined, b: GetUnitTypesRequest | PlainMessage<GetUnitTypesRequest> | undefined): boolean {
    return proto3.util.equals(GetUnitTypesRequest, a, b);
  }
}

/**
 * @generated from message unittypes.GetUnitTypesReply
 */
export class GetUnitTypesReply extends Message<GetUnitTypesReply> {
  /**
   * @generated from field: repeated unittypes.UnitType unitTypes = 1;
   */
  unitTypes: UnitType[] = [];

  /**
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  constructor(data?: PartialMessage<GetUnitTypesReply>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "unittypes.GetUnitTypesReply";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "unitTypes", kind: "message", T: UnitType, repeated: true },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUnitTypesReply {
    return new GetUnitTypesReply().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUnitTypesReply {
    return new GetUnitTypesReply().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUnitTypesReply {
    return new GetUnitTypesReply().fromJsonString(jsonString, options);
  }

  static equals(a: GetUnitTypesReply | PlainMessage<GetUnitTypesReply> | undefined, b: GetUnitTypesReply | PlainMessage<GetUnitTypesReply> | undefined): boolean {
    return proto3.util.equals(GetUnitTypesReply, a, b);
  }
}

/**
 * @generated from message unittypes.CreateUnitTypeRequest
 */
export class CreateUnitTypeRequest extends Message<CreateUnitTypeRequest> {
  /**
   * @generated from field: string JWT = 1;
   */
  JWT = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string gameId = 3;
   */
  gameId = "";

  /**
   * @generated from field: string armyTypeId = 4;
   */
  armyTypeId = "";

  /**
   * @generated from field: string troopTypeId = 5;
   */
  troopTypeId = "";

  /**
   * @generated from field: string compositionTypeId = 6;
   */
  compositionTypeId = "";

  /**
   * @generated from field: int64 pointsPerModel = 7;
   */
  pointsPerModel = protoInt64.zero;

  /**
   * @generated from field: int64 minModels = 8;
   */
  minModels = protoInt64.zero;

  /**
   * @generated from field: int64 maxModels = 9;
   */
  maxModels = protoInt64.zero;

  /**
   * @generated from field: string unitTypeId = 10;
   */
  unitTypeId = "";

  constructor(data?: PartialMessage<CreateUnitTypeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "unittypes.CreateUnitTypeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "JWT", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "gameId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "armyTypeId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "troopTypeId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "compositionTypeId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "pointsPerModel", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "minModels", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "maxModels", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "unitTypeId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateUnitTypeRequest {
    return new CreateUnitTypeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateUnitTypeRequest {
    return new CreateUnitTypeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateUnitTypeRequest {
    return new CreateUnitTypeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateUnitTypeRequest | PlainMessage<CreateUnitTypeRequest> | undefined, b: CreateUnitTypeRequest | PlainMessage<CreateUnitTypeRequest> | undefined): boolean {
    return proto3.util.equals(CreateUnitTypeRequest, a, b);
  }
}

/**
 * @generated from message unittypes.UpdateUnitTypeRequest
 */
export class UpdateUnitTypeRequest extends Message<UpdateUnitTypeRequest> {
  /**
   * @generated from field: string JWT = 1;
   */
  JWT = "";

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string troopTypeId = 4;
   */
  troopTypeId = "";

  /**
   * @generated from field: string compositionTypeId = 5;
   */
  compositionTypeId = "";

  constructor(data?: PartialMessage<UpdateUnitTypeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "unittypes.UpdateUnitTypeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "JWT", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "troopTypeId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "compositionTypeId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateUnitTypeRequest {
    return new UpdateUnitTypeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateUnitTypeRequest {
    return new UpdateUnitTypeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateUnitTypeRequest {
    return new UpdateUnitTypeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateUnitTypeRequest | PlainMessage<UpdateUnitTypeRequest> | undefined, b: UpdateUnitTypeRequest | PlainMessage<UpdateUnitTypeRequest> | undefined): boolean {
    return proto3.util.equals(UpdateUnitTypeRequest, a, b);
  }
}

/**
 * @generated from message unittypes.EmptyReply
 */
export class EmptyReply extends Message<EmptyReply> {
  constructor(data?: PartialMessage<EmptyReply>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "unittypes.EmptyReply";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EmptyReply {
    return new EmptyReply().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EmptyReply {
    return new EmptyReply().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EmptyReply {
    return new EmptyReply().fromJsonString(jsonString, options);
  }

  static equals(a: EmptyReply | PlainMessage<EmptyReply> | undefined, b: EmptyReply | PlainMessage<EmptyReply> | undefined): boolean {
    return proto3.util.equals(EmptyReply, a, b);
  }
}

