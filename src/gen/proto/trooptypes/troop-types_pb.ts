// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file proto/trooptypes/troop-types.proto (package trooptypes, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message trooptypes.GetTroopTypeRequest
 */
export class GetTroopTypeRequest extends Message<GetTroopTypeRequest> {
  /**
   * @generated from field: string JWT = 1;
   */
  JWT = "";

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  constructor(data?: PartialMessage<GetTroopTypeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "trooptypes.GetTroopTypeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "JWT", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTroopTypeRequest {
    return new GetTroopTypeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTroopTypeRequest {
    return new GetTroopTypeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTroopTypeRequest {
    return new GetTroopTypeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTroopTypeRequest | PlainMessage<GetTroopTypeRequest> | undefined, b: GetTroopTypeRequest | PlainMessage<GetTroopTypeRequest> | undefined): boolean {
    return proto3.util.equals(GetTroopTypeRequest, a, b);
  }
}

/**
 * @generated from message trooptypes.GetTroopTypesRequest
 */
export class GetTroopTypesRequest extends Message<GetTroopTypesRequest> {
  /**
   * @generated from field: string JWT = 1;
   */
  JWT = "";

  /**
   * @generated from field: string gameId = 2;
   */
  gameId = "";

  /**
   * @generated from field: int64 limit = 3;
   */
  limit = protoInt64.zero;

  /**
   * @generated from field: int64 offset = 4;
   */
  offset = protoInt64.zero;

  constructor(data?: PartialMessage<GetTroopTypesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "trooptypes.GetTroopTypesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "JWT", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "gameId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "limit", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTroopTypesRequest {
    return new GetTroopTypesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTroopTypesRequest {
    return new GetTroopTypesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTroopTypesRequest {
    return new GetTroopTypesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTroopTypesRequest | PlainMessage<GetTroopTypesRequest> | undefined, b: GetTroopTypesRequest | PlainMessage<GetTroopTypesRequest> | undefined): boolean {
    return proto3.util.equals(GetTroopTypesRequest, a, b);
  }
}

/**
 * @generated from message trooptypes.GetTroopTypesReply
 */
export class GetTroopTypesReply extends Message<GetTroopTypesReply> {
  /**
   * @generated from field: repeated trooptypes.TroopType troopTypes = 1;
   */
  troopTypes: TroopType[] = [];

  /**
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  constructor(data?: PartialMessage<GetTroopTypesReply>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "trooptypes.GetTroopTypesReply";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "troopTypes", kind: "message", T: TroopType, repeated: true },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTroopTypesReply {
    return new GetTroopTypesReply().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTroopTypesReply {
    return new GetTroopTypesReply().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTroopTypesReply {
    return new GetTroopTypesReply().fromJsonString(jsonString, options);
  }

  static equals(a: GetTroopTypesReply | PlainMessage<GetTroopTypesReply> | undefined, b: GetTroopTypesReply | PlainMessage<GetTroopTypesReply> | undefined): boolean {
    return proto3.util.equals(GetTroopTypesReply, a, b);
  }
}

/**
 * @generated from message trooptypes.CreateTroopTypeRequest
 */
export class CreateTroopTypeRequest extends Message<CreateTroopTypeRequest> {
  /**
   * @generated from field: string JWT = 1;
   */
  JWT = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string gameId = 3;
   */
  gameId = "";

  constructor(data?: PartialMessage<CreateTroopTypeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "trooptypes.CreateTroopTypeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "JWT", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "gameId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTroopTypeRequest {
    return new CreateTroopTypeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTroopTypeRequest {
    return new CreateTroopTypeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTroopTypeRequest {
    return new CreateTroopTypeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTroopTypeRequest | PlainMessage<CreateTroopTypeRequest> | undefined, b: CreateTroopTypeRequest | PlainMessage<CreateTroopTypeRequest> | undefined): boolean {
    return proto3.util.equals(CreateTroopTypeRequest, a, b);
  }
}

/**
 * @generated from message trooptypes.UpdateTroopTypeRequest
 */
export class UpdateTroopTypeRequest extends Message<UpdateTroopTypeRequest> {
  /**
   * @generated from field: string JWT = 1;
   */
  JWT = "";

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  constructor(data?: PartialMessage<UpdateTroopTypeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "trooptypes.UpdateTroopTypeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "JWT", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateTroopTypeRequest {
    return new UpdateTroopTypeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateTroopTypeRequest {
    return new UpdateTroopTypeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateTroopTypeRequest {
    return new UpdateTroopTypeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateTroopTypeRequest | PlainMessage<UpdateTroopTypeRequest> | undefined, b: UpdateTroopTypeRequest | PlainMessage<UpdateTroopTypeRequest> | undefined): boolean {
    return proto3.util.equals(UpdateTroopTypeRequest, a, b);
  }
}

/**
 * @generated from message trooptypes.DeleteTroopTypeRequest
 */
export class DeleteTroopTypeRequest extends Message<DeleteTroopTypeRequest> {
  /**
   * @generated from field: string JWT = 1;
   */
  JWT = "";

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteTroopTypeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "trooptypes.DeleteTroopTypeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "JWT", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteTroopTypeRequest {
    return new DeleteTroopTypeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteTroopTypeRequest {
    return new DeleteTroopTypeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteTroopTypeRequest {
    return new DeleteTroopTypeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteTroopTypeRequest | PlainMessage<DeleteTroopTypeRequest> | undefined, b: DeleteTroopTypeRequest | PlainMessage<DeleteTroopTypeRequest> | undefined): boolean {
    return proto3.util.equals(DeleteTroopTypeRequest, a, b);
  }
}

/**
 * @generated from message trooptypes.TroopType
 */
export class TroopType extends Message<TroopType> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string gameId = 3;
   */
  gameId = "";

  /**
   * @generated from field: google.protobuf.Timestamp createdAt = 4;
   */
  createdAt?: Timestamp;

  constructor(data?: PartialMessage<TroopType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "trooptypes.TroopType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "gameId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "createdAt", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TroopType {
    return new TroopType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TroopType {
    return new TroopType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TroopType {
    return new TroopType().fromJsonString(jsonString, options);
  }

  static equals(a: TroopType | PlainMessage<TroopType> | undefined, b: TroopType | PlainMessage<TroopType> | undefined): boolean {
    return proto3.util.equals(TroopType, a, b);
  }
}

/**
 * @generated from message trooptypes.EmptyReply
 */
export class EmptyReply extends Message<EmptyReply> {
  constructor(data?: PartialMessage<EmptyReply>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "trooptypes.EmptyReply";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EmptyReply {
    return new EmptyReply().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EmptyReply {
    return new EmptyReply().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EmptyReply {
    return new EmptyReply().fromJsonString(jsonString, options);
  }

  static equals(a: EmptyReply | PlainMessage<EmptyReply> | undefined, b: EmptyReply | PlainMessage<EmptyReply> | undefined): boolean {
    return proto3.util.equals(EmptyReply, a, b);
  }
}

