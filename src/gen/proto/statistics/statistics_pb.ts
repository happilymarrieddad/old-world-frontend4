// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file proto/statistics/statistics.proto (package statistics, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message statistics.GetStatisticRequest
 */
export class GetStatisticRequest extends Message<GetStatisticRequest> {
  /**
   * @generated from field: string JWT = 1;
   */
  JWT = "";

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  constructor(data?: PartialMessage<GetStatisticRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "statistics.GetStatisticRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "JWT", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStatisticRequest {
    return new GetStatisticRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStatisticRequest {
    return new GetStatisticRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStatisticRequest {
    return new GetStatisticRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetStatisticRequest | PlainMessage<GetStatisticRequest> | undefined, b: GetStatisticRequest | PlainMessage<GetStatisticRequest> | undefined): boolean {
    return proto3.util.equals(GetStatisticRequest, a, b);
  }
}

/**
 * @generated from message statistics.GetStatisticsRequest
 */
export class GetStatisticsRequest extends Message<GetStatisticsRequest> {
  /**
   * @generated from field: string JWT = 1;
   */
  JWT = "";

  /**
   * @generated from field: string gameId = 2;
   */
  gameId = "";

  /**
   * @generated from field: int64 limit = 3;
   */
  limit = protoInt64.zero;

  /**
   * @generated from field: int64 offset = 4;
   */
  offset = protoInt64.zero;

  constructor(data?: PartialMessage<GetStatisticsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "statistics.GetStatisticsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "JWT", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "gameId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "limit", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStatisticsRequest {
    return new GetStatisticsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStatisticsRequest {
    return new GetStatisticsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStatisticsRequest {
    return new GetStatisticsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetStatisticsRequest | PlainMessage<GetStatisticsRequest> | undefined, b: GetStatisticsRequest | PlainMessage<GetStatisticsRequest> | undefined): boolean {
    return proto3.util.equals(GetStatisticsRequest, a, b);
  }
}

/**
 * @generated from message statistics.GetStatisticsReply
 */
export class GetStatisticsReply extends Message<GetStatisticsReply> {
  /**
   * @generated from field: repeated statistics.Statistic statistics = 1;
   */
  statistics: Statistic[] = [];

  /**
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  constructor(data?: PartialMessage<GetStatisticsReply>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "statistics.GetStatisticsReply";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "statistics", kind: "message", T: Statistic, repeated: true },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStatisticsReply {
    return new GetStatisticsReply().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStatisticsReply {
    return new GetStatisticsReply().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStatisticsReply {
    return new GetStatisticsReply().fromJsonString(jsonString, options);
  }

  static equals(a: GetStatisticsReply | PlainMessage<GetStatisticsReply> | undefined, b: GetStatisticsReply | PlainMessage<GetStatisticsReply> | undefined): boolean {
    return proto3.util.equals(GetStatisticsReply, a, b);
  }
}

/**
 * @generated from message statistics.CreateStatisticRequest
 */
export class CreateStatisticRequest extends Message<CreateStatisticRequest> {
  /**
   * @generated from field: string JWT = 1;
   */
  JWT = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string display = 3;
   */
  display = "";

  /**
   * @generated from field: string gameId = 4;
   */
  gameId = "";

  constructor(data?: PartialMessage<CreateStatisticRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "statistics.CreateStatisticRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "JWT", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "display", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "gameId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateStatisticRequest {
    return new CreateStatisticRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateStatisticRequest {
    return new CreateStatisticRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateStatisticRequest {
    return new CreateStatisticRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateStatisticRequest | PlainMessage<CreateStatisticRequest> | undefined, b: CreateStatisticRequest | PlainMessage<CreateStatisticRequest> | undefined): boolean {
    return proto3.util.equals(CreateStatisticRequest, a, b);
  }
}

/**
 * @generated from message statistics.UpdateStatisticRequest
 */
export class UpdateStatisticRequest extends Message<UpdateStatisticRequest> {
  /**
   * @generated from field: string JWT = 1;
   */
  JWT = "";

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string display = 4;
   */
  display = "";

  constructor(data?: PartialMessage<UpdateStatisticRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "statistics.UpdateStatisticRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "JWT", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "display", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateStatisticRequest {
    return new UpdateStatisticRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateStatisticRequest {
    return new UpdateStatisticRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateStatisticRequest {
    return new UpdateStatisticRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateStatisticRequest | PlainMessage<UpdateStatisticRequest> | undefined, b: UpdateStatisticRequest | PlainMessage<UpdateStatisticRequest> | undefined): boolean {
    return proto3.util.equals(UpdateStatisticRequest, a, b);
  }
}

/**
 * @generated from message statistics.DeleteStatisticRequest
 */
export class DeleteStatisticRequest extends Message<DeleteStatisticRequest> {
  /**
   * @generated from field: string JWT = 1;
   */
  JWT = "";

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteStatisticRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "statistics.DeleteStatisticRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "JWT", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteStatisticRequest {
    return new DeleteStatisticRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteStatisticRequest {
    return new DeleteStatisticRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteStatisticRequest {
    return new DeleteStatisticRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteStatisticRequest | PlainMessage<DeleteStatisticRequest> | undefined, b: DeleteStatisticRequest | PlainMessage<DeleteStatisticRequest> | undefined): boolean {
    return proto3.util.equals(DeleteStatisticRequest, a, b);
  }
}

/**
 * @generated from message statistics.Statistic
 */
export class Statistic extends Message<Statistic> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string display = 3;
   */
  display = "";

  /**
   * @generated from field: string gameId = 4;
   */
  gameId = "";

  /**
   * @generated from field: google.protobuf.Timestamp createdAt = 5;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: int64 position = 6;
   */
  position = protoInt64.zero;

  constructor(data?: PartialMessage<Statistic>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "statistics.Statistic";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "display", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "gameId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "createdAt", kind: "message", T: Timestamp },
    { no: 6, name: "position", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Statistic {
    return new Statistic().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Statistic {
    return new Statistic().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Statistic {
    return new Statistic().fromJsonString(jsonString, options);
  }

  static equals(a: Statistic | PlainMessage<Statistic> | undefined, b: Statistic | PlainMessage<Statistic> | undefined): boolean {
    return proto3.util.equals(Statistic, a, b);
  }
}

/**
 * @generated from message statistics.EmptyReply
 */
export class EmptyReply extends Message<EmptyReply> {
  constructor(data?: PartialMessage<EmptyReply>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "statistics.EmptyReply";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EmptyReply {
    return new EmptyReply().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EmptyReply {
    return new EmptyReply().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EmptyReply {
    return new EmptyReply().fromJsonString(jsonString, options);
  }

  static equals(a: EmptyReply | PlainMessage<EmptyReply> | undefined, b: EmptyReply | PlainMessage<EmptyReply> | undefined): boolean {
    return proto3.util.equals(EmptyReply, a, b);
  }
}

