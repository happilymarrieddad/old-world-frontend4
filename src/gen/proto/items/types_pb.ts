// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file proto/items/types.proto (package items, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message items.Item
 */
export class Item extends Message<Item> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: int64 points = 3;
   */
  points = protoInt64.zero;

  /**
   * @generated from field: string itemTypeId = 4;
   */
  itemTypeId = "";

  /**
   * @generated from field: string itemTypeName = 5;
   */
  itemTypeName = "";

  /**
   * @generated from field: string gameId = 6;
   */
  gameId = "";

  /**
   * @generated from field: string armyTypeId = 7;
   */
  armyTypeId = "";

  /**
   * @generated from field: string description = 8;
   */
  description = "";

  /**
   * @generated from field: string story = 9;
   */
  story = "";

  /**
   * @generated from field: google.protobuf.Timestamp createdAt = 10;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updatedAt = 11;
   */
  updatedAt?: Timestamp;

  constructor(data?: PartialMessage<Item>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "items.Item";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "points", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "itemTypeId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "itemTypeName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "gameId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "armyTypeId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "story", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "createdAt", kind: "message", T: Timestamp },
    { no: 11, name: "updatedAt", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Item {
    return new Item().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Item {
    return new Item().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Item {
    return new Item().fromJsonString(jsonString, options);
  }

  static equals(a: Item | PlainMessage<Item> | undefined, b: Item | PlainMessage<Item> | undefined): boolean {
    return proto3.util.equals(Item, a, b);
  }
}

/**
 * @generated from message items.CreateGameItem
 */
export class CreateGameItem extends Message<CreateGameItem> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: int64 points = 2;
   */
  points = protoInt64.zero;

  /**
   * @generated from field: string gameId = 3;
   */
  gameId = "";

  /**
   * @generated from field: string itemTypeId = 4;
   */
  itemTypeId = "";

  /**
   * @generated from field: string description = 5;
   */
  description = "";

  /**
   * @generated from field: string story = 6;
   */
  story = "";

  constructor(data?: PartialMessage<CreateGameItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "items.CreateGameItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "points", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "gameId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "itemTypeId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "story", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateGameItem {
    return new CreateGameItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateGameItem {
    return new CreateGameItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateGameItem {
    return new CreateGameItem().fromJsonString(jsonString, options);
  }

  static equals(a: CreateGameItem | PlainMessage<CreateGameItem> | undefined, b: CreateGameItem | PlainMessage<CreateGameItem> | undefined): boolean {
    return proto3.util.equals(CreateGameItem, a, b);
  }
}

/**
 * @generated from message items.CreateArmyItem
 */
export class CreateArmyItem extends Message<CreateArmyItem> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: int64 points = 2;
   */
  points = protoInt64.zero;

  /**
   * @generated from field: string gameId = 3;
   */
  gameId = "";

  /**
   * @generated from field: string armyTypeId = 4;
   */
  armyTypeId = "";

  /**
   * @generated from field: string itemTypeId = 5;
   */
  itemTypeId = "";

  /**
   * @generated from field: string description = 6;
   */
  description = "";

  /**
   * @generated from field: string story = 7;
   */
  story = "";

  constructor(data?: PartialMessage<CreateArmyItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "items.CreateArmyItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "points", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "gameId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "armyTypeId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "itemTypeId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "story", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateArmyItem {
    return new CreateArmyItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateArmyItem {
    return new CreateArmyItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateArmyItem {
    return new CreateArmyItem().fromJsonString(jsonString, options);
  }

  static equals(a: CreateArmyItem | PlainMessage<CreateArmyItem> | undefined, b: CreateArmyItem | PlainMessage<CreateArmyItem> | undefined): boolean {
    return proto3.util.equals(CreateArmyItem, a, b);
  }
}

/**
 * @generated from message items.UpdateItem
 */
export class UpdateItem extends Message<UpdateItem> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: int64 points = 3;
   */
  points = protoInt64.zero;

  /**
   * @generated from field: string description = 4;
   */
  description = "";

  /**
   * @generated from field: string story = 5;
   */
  story = "";

  constructor(data?: PartialMessage<UpdateItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "items.UpdateItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "points", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "story", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateItem {
    return new UpdateItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateItem {
    return new UpdateItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateItem {
    return new UpdateItem().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateItem | PlainMessage<UpdateItem> | undefined, b: UpdateItem | PlainMessage<UpdateItem> | undefined): boolean {
    return proto3.util.equals(UpdateItem, a, b);
  }
}

/**
 * @generated from message items.EmptyReply
 */
export class EmptyReply extends Message<EmptyReply> {
  constructor(data?: PartialMessage<EmptyReply>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "items.EmptyReply";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EmptyReply {
    return new EmptyReply().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EmptyReply {
    return new EmptyReply().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EmptyReply {
    return new EmptyReply().fromJsonString(jsonString, options);
  }

  static equals(a: EmptyReply | PlainMessage<EmptyReply> | undefined, b: EmptyReply | PlainMessage<EmptyReply> | undefined): boolean {
    return proto3.util.equals(EmptyReply, a, b);
  }
}

