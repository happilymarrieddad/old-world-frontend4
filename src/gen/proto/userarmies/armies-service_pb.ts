// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file proto/userarmies/armies-service.proto (package userarmies, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { UserArmy } from "./armies_pb.js";

/**
 * @generated from message userarmies.UpdateUserArmyRequest
 */
export class UpdateUserArmyRequest extends Message<UpdateUserArmyRequest> {
  /**
   * @generated from field: string JWT = 1;
   */
  JWT = "";

  /**
   * @generated from field: string userArmyId = 2;
   */
  userArmyId = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: int64 points = 4;
   */
  points = protoInt64.zero;

  constructor(data?: PartialMessage<UpdateUserArmyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "userarmies.UpdateUserArmyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "JWT", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "userArmyId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "points", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateUserArmyRequest {
    return new UpdateUserArmyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateUserArmyRequest {
    return new UpdateUserArmyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateUserArmyRequest {
    return new UpdateUserArmyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateUserArmyRequest | PlainMessage<UpdateUserArmyRequest> | undefined, b: UpdateUserArmyRequest | PlainMessage<UpdateUserArmyRequest> | undefined): boolean {
    return proto3.util.equals(UpdateUserArmyRequest, a, b);
  }
}

/**
 * @generated from message userarmies.AddUnitRequest
 */
export class AddUnitRequest extends Message<AddUnitRequest> {
  /**
   * @generated from field: string JWT = 1;
   */
  JWT = "";

  /**
   * @generated from field: string userArmyId = 2;
   */
  userArmyId = "";

  /**
   * @generated from field: string unitTypeid = 3;
   */
  unitTypeid = "";

  constructor(data?: PartialMessage<AddUnitRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "userarmies.AddUnitRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "JWT", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "userArmyId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "unitTypeid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddUnitRequest {
    return new AddUnitRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddUnitRequest {
    return new AddUnitRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddUnitRequest {
    return new AddUnitRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddUnitRequest | PlainMessage<AddUnitRequest> | undefined, b: AddUnitRequest | PlainMessage<AddUnitRequest> | undefined): boolean {
    return proto3.util.equals(AddUnitRequest, a, b);
  }
}

/**
 * @generated from message userarmies.RemoveUnitRequest
 */
export class RemoveUnitRequest extends Message<RemoveUnitRequest> {
  /**
   * @generated from field: string JWT = 1;
   */
  JWT = "";

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * @generated from field: string userArmyId = 3;
   */
  userArmyId = "";

  constructor(data?: PartialMessage<RemoveUnitRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "userarmies.RemoveUnitRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "JWT", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "userArmyId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveUnitRequest {
    return new RemoveUnitRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveUnitRequest {
    return new RemoveUnitRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveUnitRequest {
    return new RemoveUnitRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveUnitRequest | PlainMessage<RemoveUnitRequest> | undefined, b: RemoveUnitRequest | PlainMessage<RemoveUnitRequest> | undefined): boolean {
    return proto3.util.equals(RemoveUnitRequest, a, b);
  }
}

/**
 * @generated from message userarmies.GetUserArmyRequest
 */
export class GetUserArmyRequest extends Message<GetUserArmyRequest> {
  /**
   * @generated from field: string JWT = 1;
   */
  JWT = "";

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  constructor(data?: PartialMessage<GetUserArmyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "userarmies.GetUserArmyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "JWT", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserArmyRequest {
    return new GetUserArmyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserArmyRequest {
    return new GetUserArmyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserArmyRequest {
    return new GetUserArmyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserArmyRequest | PlainMessage<GetUserArmyRequest> | undefined, b: GetUserArmyRequest | PlainMessage<GetUserArmyRequest> | undefined): boolean {
    return proto3.util.equals(GetUserArmyRequest, a, b);
  }
}

/**
 * @generated from message userarmies.GetUserArmyReply
 */
export class GetUserArmyReply extends Message<GetUserArmyReply> {
  /**
   * @generated from field: userarmies.UserArmy userArmy = 1;
   */
  userArmy?: UserArmy;

  constructor(data?: PartialMessage<GetUserArmyReply>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "userarmies.GetUserArmyReply";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "userArmy", kind: "message", T: UserArmy },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserArmyReply {
    return new GetUserArmyReply().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserArmyReply {
    return new GetUserArmyReply().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserArmyReply {
    return new GetUserArmyReply().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserArmyReply | PlainMessage<GetUserArmyReply> | undefined, b: GetUserArmyReply | PlainMessage<GetUserArmyReply> | undefined): boolean {
    return proto3.util.equals(GetUserArmyReply, a, b);
  }
}

/**
 * @generated from message userarmies.DestroyUserArmyRequest
 */
export class DestroyUserArmyRequest extends Message<DestroyUserArmyRequest> {
  /**
   * @generated from field: string JWT = 1;
   */
  JWT = "";

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  constructor(data?: PartialMessage<DestroyUserArmyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "userarmies.DestroyUserArmyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "JWT", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DestroyUserArmyRequest {
    return new DestroyUserArmyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DestroyUserArmyRequest {
    return new DestroyUserArmyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DestroyUserArmyRequest {
    return new DestroyUserArmyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DestroyUserArmyRequest | PlainMessage<DestroyUserArmyRequest> | undefined, b: DestroyUserArmyRequest | PlainMessage<DestroyUserArmyRequest> | undefined): boolean {
    return proto3.util.equals(DestroyUserArmyRequest, a, b);
  }
}

/**
 * @generated from message userarmies.GetUserArmiesRequest
 */
export class GetUserArmiesRequest extends Message<GetUserArmiesRequest> {
  /**
   * @generated from field: string JWT = 1;
   */
  JWT = "";

  /**
   * @generated from field: int64 limit = 2;
   */
  limit = protoInt64.zero;

  /**
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  constructor(data?: PartialMessage<GetUserArmiesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "userarmies.GetUserArmiesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "JWT", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "limit", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserArmiesRequest {
    return new GetUserArmiesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserArmiesRequest {
    return new GetUserArmiesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserArmiesRequest {
    return new GetUserArmiesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserArmiesRequest | PlainMessage<GetUserArmiesRequest> | undefined, b: GetUserArmiesRequest | PlainMessage<GetUserArmiesRequest> | undefined): boolean {
    return proto3.util.equals(GetUserArmiesRequest, a, b);
  }
}

/**
 * @generated from message userarmies.GetUserArmiesReply
 */
export class GetUserArmiesReply extends Message<GetUserArmiesReply> {
  /**
   * @generated from field: repeated userarmies.UserArmy userArmies = 1;
   */
  userArmies: UserArmy[] = [];

  /**
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  constructor(data?: PartialMessage<GetUserArmiesReply>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "userarmies.GetUserArmiesReply";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "userArmies", kind: "message", T: UserArmy, repeated: true },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserArmiesReply {
    return new GetUserArmiesReply().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserArmiesReply {
    return new GetUserArmiesReply().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserArmiesReply {
    return new GetUserArmiesReply().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserArmiesReply | PlainMessage<GetUserArmiesReply> | undefined, b: GetUserArmiesReply | PlainMessage<GetUserArmiesReply> | undefined): boolean {
    return proto3.util.equals(GetUserArmiesReply, a, b);
  }
}

/**
 * @generated from message userarmies.CreateUserArmyRequest
 */
export class CreateUserArmyRequest extends Message<CreateUserArmyRequest> {
  /**
   * @generated from field: string JWT = 1;
   */
  JWT = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string gameId = 3;
   */
  gameId = "";

  /**
   * @generated from field: string armyTypeId = 4;
   */
  armyTypeId = "";

  /**
   * @generated from field: int64 points = 5;
   */
  points = protoInt64.zero;

  constructor(data?: PartialMessage<CreateUserArmyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "userarmies.CreateUserArmyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "JWT", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "gameId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "armyTypeId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "points", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateUserArmyRequest {
    return new CreateUserArmyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateUserArmyRequest {
    return new CreateUserArmyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateUserArmyRequest {
    return new CreateUserArmyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateUserArmyRequest | PlainMessage<CreateUserArmyRequest> | undefined, b: CreateUserArmyRequest | PlainMessage<CreateUserArmyRequest> | undefined): boolean {
    return proto3.util.equals(CreateUserArmyRequest, a, b);
  }
}

/**
 * @generated from message userarmies.CreateUserArmyReply
 */
export class CreateUserArmyReply extends Message<CreateUserArmyReply> {
  /**
   * @generated from field: userarmies.UserArmy userArmy = 1;
   */
  userArmy?: UserArmy;

  constructor(data?: PartialMessage<CreateUserArmyReply>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "userarmies.CreateUserArmyReply";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "userArmy", kind: "message", T: UserArmy },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateUserArmyReply {
    return new CreateUserArmyReply().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateUserArmyReply {
    return new CreateUserArmyReply().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateUserArmyReply {
    return new CreateUserArmyReply().fromJsonString(jsonString, options);
  }

  static equals(a: CreateUserArmyReply | PlainMessage<CreateUserArmyReply> | undefined, b: CreateUserArmyReply | PlainMessage<CreateUserArmyReply> | undefined): boolean {
    return proto3.util.equals(CreateUserArmyReply, a, b);
  }
}

/**
 * @generated from message userarmies.EmptyReply
 */
export class EmptyReply extends Message<EmptyReply> {
  constructor(data?: PartialMessage<EmptyReply>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "userarmies.EmptyReply";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EmptyReply {
    return new EmptyReply().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EmptyReply {
    return new EmptyReply().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EmptyReply {
    return new EmptyReply().fromJsonString(jsonString, options);
  }

  static equals(a: EmptyReply | PlainMessage<EmptyReply> | undefined, b: EmptyReply | PlainMessage<EmptyReply> | undefined): boolean {
    return proto3.util.equals(EmptyReply, a, b);
  }
}

