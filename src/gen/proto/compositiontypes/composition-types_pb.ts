// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file proto/compositiontypes/composition-types.proto (package compositiontypes, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message compositiontypes.GetCompositionTypeRequest
 */
export class GetCompositionTypeRequest extends Message<GetCompositionTypeRequest> {
  /**
   * @generated from field: string JWT = 1;
   */
  JWT = "";

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  constructor(data?: PartialMessage<GetCompositionTypeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "compositiontypes.GetCompositionTypeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "JWT", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCompositionTypeRequest {
    return new GetCompositionTypeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCompositionTypeRequest {
    return new GetCompositionTypeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCompositionTypeRequest {
    return new GetCompositionTypeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCompositionTypeRequest | PlainMessage<GetCompositionTypeRequest> | undefined, b: GetCompositionTypeRequest | PlainMessage<GetCompositionTypeRequest> | undefined): boolean {
    return proto3.util.equals(GetCompositionTypeRequest, a, b);
  }
}

/**
 * @generated from message compositiontypes.GetCompositionTypesRequest
 */
export class GetCompositionTypesRequest extends Message<GetCompositionTypesRequest> {
  /**
   * @generated from field: string JWT = 1;
   */
  JWT = "";

  /**
   * @generated from field: string gameId = 2;
   */
  gameId = "";

  /**
   * @generated from field: int64 limit = 3;
   */
  limit = protoInt64.zero;

  /**
   * @generated from field: int64 offset = 4;
   */
  offset = protoInt64.zero;

  constructor(data?: PartialMessage<GetCompositionTypesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "compositiontypes.GetCompositionTypesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "JWT", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "gameId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "limit", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCompositionTypesRequest {
    return new GetCompositionTypesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCompositionTypesRequest {
    return new GetCompositionTypesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCompositionTypesRequest {
    return new GetCompositionTypesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCompositionTypesRequest | PlainMessage<GetCompositionTypesRequest> | undefined, b: GetCompositionTypesRequest | PlainMessage<GetCompositionTypesRequest> | undefined): boolean {
    return proto3.util.equals(GetCompositionTypesRequest, a, b);
  }
}

/**
 * @generated from message compositiontypes.GetCompositionTypesReply
 */
export class GetCompositionTypesReply extends Message<GetCompositionTypesReply> {
  /**
   * @generated from field: repeated compositiontypes.CompositionType compositionTypes = 1;
   */
  compositionTypes: CompositionType[] = [];

  /**
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  constructor(data?: PartialMessage<GetCompositionTypesReply>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "compositiontypes.GetCompositionTypesReply";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "compositionTypes", kind: "message", T: CompositionType, repeated: true },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCompositionTypesReply {
    return new GetCompositionTypesReply().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCompositionTypesReply {
    return new GetCompositionTypesReply().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCompositionTypesReply {
    return new GetCompositionTypesReply().fromJsonString(jsonString, options);
  }

  static equals(a: GetCompositionTypesReply | PlainMessage<GetCompositionTypesReply> | undefined, b: GetCompositionTypesReply | PlainMessage<GetCompositionTypesReply> | undefined): boolean {
    return proto3.util.equals(GetCompositionTypesReply, a, b);
  }
}

/**
 * @generated from message compositiontypes.CreateCompositionTypeRequest
 */
export class CreateCompositionTypeRequest extends Message<CreateCompositionTypeRequest> {
  /**
   * @generated from field: string JWT = 1;
   */
  JWT = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string gameId = 3;
   */
  gameId = "";

  constructor(data?: PartialMessage<CreateCompositionTypeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "compositiontypes.CreateCompositionTypeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "JWT", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "gameId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateCompositionTypeRequest {
    return new CreateCompositionTypeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateCompositionTypeRequest {
    return new CreateCompositionTypeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateCompositionTypeRequest {
    return new CreateCompositionTypeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateCompositionTypeRequest | PlainMessage<CreateCompositionTypeRequest> | undefined, b: CreateCompositionTypeRequest | PlainMessage<CreateCompositionTypeRequest> | undefined): boolean {
    return proto3.util.equals(CreateCompositionTypeRequest, a, b);
  }
}

/**
 * @generated from message compositiontypes.UpdateCompositionTypeRequest
 */
export class UpdateCompositionTypeRequest extends Message<UpdateCompositionTypeRequest> {
  /**
   * @generated from field: string JWT = 1;
   */
  JWT = "";

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  constructor(data?: PartialMessage<UpdateCompositionTypeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "compositiontypes.UpdateCompositionTypeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "JWT", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateCompositionTypeRequest {
    return new UpdateCompositionTypeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateCompositionTypeRequest {
    return new UpdateCompositionTypeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateCompositionTypeRequest {
    return new UpdateCompositionTypeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateCompositionTypeRequest | PlainMessage<UpdateCompositionTypeRequest> | undefined, b: UpdateCompositionTypeRequest | PlainMessage<UpdateCompositionTypeRequest> | undefined): boolean {
    return proto3.util.equals(UpdateCompositionTypeRequest, a, b);
  }
}

/**
 * @generated from message compositiontypes.DeleteCompositionTypeRequest
 */
export class DeleteCompositionTypeRequest extends Message<DeleteCompositionTypeRequest> {
  /**
   * @generated from field: string JWT = 1;
   */
  JWT = "";

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteCompositionTypeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "compositiontypes.DeleteCompositionTypeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "JWT", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteCompositionTypeRequest {
    return new DeleteCompositionTypeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteCompositionTypeRequest {
    return new DeleteCompositionTypeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteCompositionTypeRequest {
    return new DeleteCompositionTypeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteCompositionTypeRequest | PlainMessage<DeleteCompositionTypeRequest> | undefined, b: DeleteCompositionTypeRequest | PlainMessage<DeleteCompositionTypeRequest> | undefined): boolean {
    return proto3.util.equals(DeleteCompositionTypeRequest, a, b);
  }
}

/**
 * @generated from message compositiontypes.CompositionType
 */
export class CompositionType extends Message<CompositionType> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string gameId = 3;
   */
  gameId = "";

  /**
   * @generated from field: google.protobuf.Timestamp createdAt = 4;
   */
  createdAt?: Timestamp;

  constructor(data?: PartialMessage<CompositionType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "compositiontypes.CompositionType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "gameId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "createdAt", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CompositionType {
    return new CompositionType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CompositionType {
    return new CompositionType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CompositionType {
    return new CompositionType().fromJsonString(jsonString, options);
  }

  static equals(a: CompositionType | PlainMessage<CompositionType> | undefined, b: CompositionType | PlainMessage<CompositionType> | undefined): boolean {
    return proto3.util.equals(CompositionType, a, b);
  }
}

/**
 * @generated from message compositiontypes.EmptyReply
 */
export class EmptyReply extends Message<EmptyReply> {
  constructor(data?: PartialMessage<EmptyReply>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "compositiontypes.EmptyReply";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EmptyReply {
    return new EmptyReply().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EmptyReply {
    return new EmptyReply().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EmptyReply {
    return new EmptyReply().fromJsonString(jsonString, options);
  }

  static equals(a: EmptyReply | PlainMessage<EmptyReply> | undefined, b: EmptyReply | PlainMessage<EmptyReply> | undefined): boolean {
    return proto3.util.equals(EmptyReply, a, b);
  }
}

