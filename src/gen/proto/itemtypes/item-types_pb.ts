// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file proto/itemtypes/item-types.proto (package itemtypes, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message itemtypes.GetItemTypeRequest
 */
export class GetItemTypeRequest extends Message<GetItemTypeRequest> {
  /**
   * @generated from field: string JWT = 1;
   */
  JWT = "";

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  constructor(data?: PartialMessage<GetItemTypeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "itemtypes.GetItemTypeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "JWT", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetItemTypeRequest {
    return new GetItemTypeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetItemTypeRequest {
    return new GetItemTypeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetItemTypeRequest {
    return new GetItemTypeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetItemTypeRequest | PlainMessage<GetItemTypeRequest> | undefined, b: GetItemTypeRequest | PlainMessage<GetItemTypeRequest> | undefined): boolean {
    return proto3.util.equals(GetItemTypeRequest, a, b);
  }
}

/**
 * @generated from message itemtypes.GetItemTypesRequest
 */
export class GetItemTypesRequest extends Message<GetItemTypesRequest> {
  /**
   * @generated from field: string JWT = 1;
   */
  JWT = "";

  /**
   * @generated from field: string gameId = 2;
   */
  gameId = "";

  /**
   * @generated from field: int64 limit = 3;
   */
  limit = protoInt64.zero;

  /**
   * @generated from field: int64 offset = 4;
   */
  offset = protoInt64.zero;

  constructor(data?: PartialMessage<GetItemTypesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "itemtypes.GetItemTypesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "JWT", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "gameId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "limit", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetItemTypesRequest {
    return new GetItemTypesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetItemTypesRequest {
    return new GetItemTypesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetItemTypesRequest {
    return new GetItemTypesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetItemTypesRequest | PlainMessage<GetItemTypesRequest> | undefined, b: GetItemTypesRequest | PlainMessage<GetItemTypesRequest> | undefined): boolean {
    return proto3.util.equals(GetItemTypesRequest, a, b);
  }
}

/**
 * @generated from message itemtypes.GetItemTypesReply
 */
export class GetItemTypesReply extends Message<GetItemTypesReply> {
  /**
   * @generated from field: repeated itemtypes.ItemType itemTypes = 1;
   */
  itemTypes: ItemType[] = [];

  /**
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  constructor(data?: PartialMessage<GetItemTypesReply>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "itemtypes.GetItemTypesReply";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "itemTypes", kind: "message", T: ItemType, repeated: true },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetItemTypesReply {
    return new GetItemTypesReply().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetItemTypesReply {
    return new GetItemTypesReply().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetItemTypesReply {
    return new GetItemTypesReply().fromJsonString(jsonString, options);
  }

  static equals(a: GetItemTypesReply | PlainMessage<GetItemTypesReply> | undefined, b: GetItemTypesReply | PlainMessage<GetItemTypesReply> | undefined): boolean {
    return proto3.util.equals(GetItemTypesReply, a, b);
  }
}

/**
 * @generated from message itemtypes.CreateItemTypeRequest
 */
export class CreateItemTypeRequest extends Message<CreateItemTypeRequest> {
  /**
   * @generated from field: string JWT = 1;
   */
  JWT = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string gameId = 3;
   */
  gameId = "";

  constructor(data?: PartialMessage<CreateItemTypeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "itemtypes.CreateItemTypeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "JWT", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "gameId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateItemTypeRequest {
    return new CreateItemTypeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateItemTypeRequest {
    return new CreateItemTypeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateItemTypeRequest {
    return new CreateItemTypeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateItemTypeRequest | PlainMessage<CreateItemTypeRequest> | undefined, b: CreateItemTypeRequest | PlainMessage<CreateItemTypeRequest> | undefined): boolean {
    return proto3.util.equals(CreateItemTypeRequest, a, b);
  }
}

/**
 * @generated from message itemtypes.UpdateItemTypeRequest
 */
export class UpdateItemTypeRequest extends Message<UpdateItemTypeRequest> {
  /**
   * @generated from field: string JWT = 1;
   */
  JWT = "";

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  constructor(data?: PartialMessage<UpdateItemTypeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "itemtypes.UpdateItemTypeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "JWT", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateItemTypeRequest {
    return new UpdateItemTypeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateItemTypeRequest {
    return new UpdateItemTypeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateItemTypeRequest {
    return new UpdateItemTypeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateItemTypeRequest | PlainMessage<UpdateItemTypeRequest> | undefined, b: UpdateItemTypeRequest | PlainMessage<UpdateItemTypeRequest> | undefined): boolean {
    return proto3.util.equals(UpdateItemTypeRequest, a, b);
  }
}

/**
 * @generated from message itemtypes.DeleteItemTypeRequest
 */
export class DeleteItemTypeRequest extends Message<DeleteItemTypeRequest> {
  /**
   * @generated from field: string JWT = 1;
   */
  JWT = "";

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteItemTypeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "itemtypes.DeleteItemTypeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "JWT", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteItemTypeRequest {
    return new DeleteItemTypeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteItemTypeRequest {
    return new DeleteItemTypeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteItemTypeRequest {
    return new DeleteItemTypeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteItemTypeRequest | PlainMessage<DeleteItemTypeRequest> | undefined, b: DeleteItemTypeRequest | PlainMessage<DeleteItemTypeRequest> | undefined): boolean {
    return proto3.util.equals(DeleteItemTypeRequest, a, b);
  }
}

/**
 * @generated from message itemtypes.ItemType
 */
export class ItemType extends Message<ItemType> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string gameId = 3;
   */
  gameId = "";

  /**
   * @generated from field: google.protobuf.Timestamp createdAt = 4;
   */
  createdAt?: Timestamp;

  constructor(data?: PartialMessage<ItemType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "itemtypes.ItemType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "gameId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "createdAt", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ItemType {
    return new ItemType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ItemType {
    return new ItemType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ItemType {
    return new ItemType().fromJsonString(jsonString, options);
  }

  static equals(a: ItemType | PlainMessage<ItemType> | undefined, b: ItemType | PlainMessage<ItemType> | undefined): boolean {
    return proto3.util.equals(ItemType, a, b);
  }
}

/**
 * @generated from message itemtypes.EmptyReply
 */
export class EmptyReply extends Message<EmptyReply> {
  constructor(data?: PartialMessage<EmptyReply>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "itemtypes.EmptyReply";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EmptyReply {
    return new EmptyReply().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EmptyReply {
    return new EmptyReply().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EmptyReply {
    return new EmptyReply().fromJsonString(jsonString, options);
  }

  static equals(a: EmptyReply | PlainMessage<EmptyReply> | undefined, b: EmptyReply | PlainMessage<EmptyReply> | undefined): boolean {
    return proto3.util.equals(EmptyReply, a, b);
  }
}

