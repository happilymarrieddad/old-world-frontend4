// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file proto/optiontypes/option-types.proto (package optiontypes, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message optiontypes.GetOptionTypeRequest
 */
export class GetOptionTypeRequest extends Message<GetOptionTypeRequest> {
  /**
   * @generated from field: string JWT = 1;
   */
  JWT = "";

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  constructor(data?: PartialMessage<GetOptionTypeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "optiontypes.GetOptionTypeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "JWT", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOptionTypeRequest {
    return new GetOptionTypeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOptionTypeRequest {
    return new GetOptionTypeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOptionTypeRequest {
    return new GetOptionTypeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetOptionTypeRequest | PlainMessage<GetOptionTypeRequest> | undefined, b: GetOptionTypeRequest | PlainMessage<GetOptionTypeRequest> | undefined): boolean {
    return proto3.util.equals(GetOptionTypeRequest, a, b);
  }
}

/**
 * @generated from message optiontypes.GetOptionTypesRequest
 */
export class GetOptionTypesRequest extends Message<GetOptionTypesRequest> {
  /**
   * @generated from field: string JWT = 1;
   */
  JWT = "";

  /**
   * @generated from field: string gameId = 2;
   */
  gameId = "";

  /**
   * @generated from field: int64 limit = 3;
   */
  limit = protoInt64.zero;

  /**
   * @generated from field: int64 offset = 4;
   */
  offset = protoInt64.zero;

  constructor(data?: PartialMessage<GetOptionTypesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "optiontypes.GetOptionTypesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "JWT", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "gameId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "limit", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOptionTypesRequest {
    return new GetOptionTypesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOptionTypesRequest {
    return new GetOptionTypesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOptionTypesRequest {
    return new GetOptionTypesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetOptionTypesRequest | PlainMessage<GetOptionTypesRequest> | undefined, b: GetOptionTypesRequest | PlainMessage<GetOptionTypesRequest> | undefined): boolean {
    return proto3.util.equals(GetOptionTypesRequest, a, b);
  }
}

/**
 * @generated from message optiontypes.GetOptionTypesReply
 */
export class GetOptionTypesReply extends Message<GetOptionTypesReply> {
  /**
   * @generated from field: repeated optiontypes.OptionType optionTypes = 1;
   */
  optionTypes: OptionType[] = [];

  /**
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  constructor(data?: PartialMessage<GetOptionTypesReply>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "optiontypes.GetOptionTypesReply";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "optionTypes", kind: "message", T: OptionType, repeated: true },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOptionTypesReply {
    return new GetOptionTypesReply().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOptionTypesReply {
    return new GetOptionTypesReply().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOptionTypesReply {
    return new GetOptionTypesReply().fromJsonString(jsonString, options);
  }

  static equals(a: GetOptionTypesReply | PlainMessage<GetOptionTypesReply> | undefined, b: GetOptionTypesReply | PlainMessage<GetOptionTypesReply> | undefined): boolean {
    return proto3.util.equals(GetOptionTypesReply, a, b);
  }
}

/**
 * @generated from message optiontypes.CreateOptionTypeRequest
 */
export class CreateOptionTypeRequest extends Message<CreateOptionTypeRequest> {
  /**
   * @generated from field: string JWT = 1;
   */
  JWT = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string gameId = 3;
   */
  gameId = "";

  constructor(data?: PartialMessage<CreateOptionTypeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "optiontypes.CreateOptionTypeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "JWT", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "gameId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateOptionTypeRequest {
    return new CreateOptionTypeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateOptionTypeRequest {
    return new CreateOptionTypeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateOptionTypeRequest {
    return new CreateOptionTypeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateOptionTypeRequest | PlainMessage<CreateOptionTypeRequest> | undefined, b: CreateOptionTypeRequest | PlainMessage<CreateOptionTypeRequest> | undefined): boolean {
    return proto3.util.equals(CreateOptionTypeRequest, a, b);
  }
}

/**
 * @generated from message optiontypes.UpdateOptionTypeRequest
 */
export class UpdateOptionTypeRequest extends Message<UpdateOptionTypeRequest> {
  /**
   * @generated from field: string JWT = 1;
   */
  JWT = "";

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  constructor(data?: PartialMessage<UpdateOptionTypeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "optiontypes.UpdateOptionTypeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "JWT", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateOptionTypeRequest {
    return new UpdateOptionTypeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateOptionTypeRequest {
    return new UpdateOptionTypeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateOptionTypeRequest {
    return new UpdateOptionTypeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateOptionTypeRequest | PlainMessage<UpdateOptionTypeRequest> | undefined, b: UpdateOptionTypeRequest | PlainMessage<UpdateOptionTypeRequest> | undefined): boolean {
    return proto3.util.equals(UpdateOptionTypeRequest, a, b);
  }
}

/**
 * @generated from message optiontypes.DeleteOptionTypeRequest
 */
export class DeleteOptionTypeRequest extends Message<DeleteOptionTypeRequest> {
  /**
   * @generated from field: string JWT = 1;
   */
  JWT = "";

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteOptionTypeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "optiontypes.DeleteOptionTypeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "JWT", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteOptionTypeRequest {
    return new DeleteOptionTypeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteOptionTypeRequest {
    return new DeleteOptionTypeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteOptionTypeRequest {
    return new DeleteOptionTypeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteOptionTypeRequest | PlainMessage<DeleteOptionTypeRequest> | undefined, b: DeleteOptionTypeRequest | PlainMessage<DeleteOptionTypeRequest> | undefined): boolean {
    return proto3.util.equals(DeleteOptionTypeRequest, a, b);
  }
}

/**
 * @generated from message optiontypes.OptionType
 */
export class OptionType extends Message<OptionType> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string gameId = 3;
   */
  gameId = "";

  /**
   * @generated from field: google.protobuf.Timestamp createdAt = 4;
   */
  createdAt?: Timestamp;

  constructor(data?: PartialMessage<OptionType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "optiontypes.OptionType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "gameId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "createdAt", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OptionType {
    return new OptionType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OptionType {
    return new OptionType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OptionType {
    return new OptionType().fromJsonString(jsonString, options);
  }

  static equals(a: OptionType | PlainMessage<OptionType> | undefined, b: OptionType | PlainMessage<OptionType> | undefined): boolean {
    return proto3.util.equals(OptionType, a, b);
  }
}

/**
 * @generated from message optiontypes.EmptyReply
 */
export class EmptyReply extends Message<EmptyReply> {
  constructor(data?: PartialMessage<EmptyReply>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "optiontypes.EmptyReply";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EmptyReply {
    return new EmptyReply().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EmptyReply {
    return new EmptyReply().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EmptyReply {
    return new EmptyReply().fromJsonString(jsonString, options);
  }

  static equals(a: EmptyReply | PlainMessage<EmptyReply> | undefined, b: EmptyReply | PlainMessage<EmptyReply> | undefined): boolean {
    return proto3.util.equals(EmptyReply, a, b);
  }
}

