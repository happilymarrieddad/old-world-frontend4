var q=Object.defineProperty;var A=(e,a,t)=>a in e?q(e,a,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[a]=t;var r=(e,a,t)=>(A(e,typeof a!="symbol"?a+"":a,t),t);import{R as T,S as i,T as b,U as S,V,W as v,X as z,u as M}from"./index-NHNacFVT.js";import{T as K}from"./timestamp_pb-DpX4yl5v.js";const c=class c extends T{constructor(t){super();r(this,"JWT","");r(this,"id","");i.util.initPartial(t,this)}static fromBinary(t,n){return new c().fromBinary(t,n)}static fromJson(t,n){return new c().fromJson(t,n)}static fromJsonString(t,n){return new c().fromJsonString(t,n)}static equals(t,n){return i.util.equals(c,t,n)}};r(c,"runtime",i),r(c,"typeName","games.GetGameRequest"),r(c,"fields",i.util.newFieldList(()=>[{no:1,name:"JWT",kind:"scalar",T:9},{no:2,name:"id",kind:"scalar",T:9}]));let B=c;const m=class m extends T{constructor(t){super();r(this,"game");i.util.initPartial(t,this)}static fromBinary(t,n){return new m().fromBinary(t,n)}static fromJson(t,n){return new m().fromJson(t,n)}static fromJsonString(t,n){return new m().fromJsonString(t,n)}static equals(t,n){return i.util.equals(m,t,n)}};r(m,"runtime",i),r(m,"typeName","games.GetGameReply"),r(m,"fields",i.util.newFieldList(()=>[{no:1,name:"game",kind:"message",T:N}]));let F=m;const u=class u extends T{constructor(t){super();r(this,"JWT","");r(this,"id","");r(this,"name","");i.util.initPartial(t,this)}static fromBinary(t,n){return new u().fromBinary(t,n)}static fromJson(t,n){return new u().fromJson(t,n)}static fromJsonString(t,n){return new u().fromJsonString(t,n)}static equals(t,n){return i.util.equals(u,t,n)}};r(u,"runtime",i),r(u,"typeName","games.UpdateGameRequest"),r(u,"fields",i.util.newFieldList(()=>[{no:1,name:"JWT",kind:"scalar",T:9},{no:2,name:"id",kind:"scalar",T:9},{no:3,name:"name",kind:"scalar",T:9}]));let W=u;const l=class l extends T{constructor(t){super();r(this,"JWT","");r(this,"limit",b.zero);r(this,"offset",b.zero);i.util.initPartial(t,this)}static fromBinary(t,n){return new l().fromBinary(t,n)}static fromJson(t,n){return new l().fromJson(t,n)}static fromJsonString(t,n){return new l().fromJsonString(t,n)}static equals(t,n){return i.util.equals(l,t,n)}};r(l,"runtime",i),r(l,"typeName","games.GetGamesRequest"),r(l,"fields",i.util.newFieldList(()=>[{no:1,name:"JWT",kind:"scalar",T:9},{no:2,name:"limit",kind:"scalar",T:3},{no:3,name:"offset",kind:"scalar",T:3}]));let P=l;const f=class f extends T{constructor(t){super();r(this,"games",[]);i.util.initPartial(t,this)}static fromBinary(t,n){return new f().fromBinary(t,n)}static fromJson(t,n){return new f().fromJson(t,n)}static fromJsonString(t,n){return new f().fromJsonString(t,n)}static equals(t,n){return i.util.equals(f,t,n)}};r(f,"runtime",i),r(f,"typeName","games.GetGamesReply"),r(f,"fields",i.util.newFieldList(()=>[{no:1,name:"games",kind:"message",T:N,repeated:!0}]));let L=f;const d=class d extends T{constructor(t){super();r(this,"JWT","");r(this,"name","");i.util.initPartial(t,this)}static fromBinary(t,n){return new d().fromBinary(t,n)}static fromJson(t,n){return new d().fromJson(t,n)}static fromJsonString(t,n){return new d().fromJsonString(t,n)}static equals(t,n){return i.util.equals(d,t,n)}};r(d,"runtime",i),r(d,"typeName","games.CreateGameRequest"),r(d,"fields",i.util.newFieldList(()=>[{no:1,name:"JWT",kind:"scalar",T:9},{no:2,name:"name",kind:"scalar",T:9}]));let x=d;const g=class g extends T{constructor(t){super();r(this,"JWT","");r(this,"id","");i.util.initPartial(t,this)}static fromBinary(t,n){return new g().fromBinary(t,n)}static fromJson(t,n){return new g().fromJson(t,n)}static fromJsonString(t,n){return new g().fromJsonString(t,n)}static equals(t,n){return i.util.equals(g,t,n)}};r(g,"runtime",i),r(g,"typeName","games.DeleteGameRequest"),r(g,"fields",i.util.newFieldList(()=>[{no:1,name:"JWT",kind:"scalar",T:9},{no:2,name:"id",kind:"scalar",T:9}]));let I=g;const J=class J extends T{constructor(t){super();r(this,"id","");r(this,"name","");r(this,"createdAt");i.util.initPartial(t,this)}static fromBinary(t,n){return new J().fromBinary(t,n)}static fromJson(t,n){return new J().fromJson(t,n)}static fromJsonString(t,n){return new J().fromJsonString(t,n)}static equals(t,n){return i.util.equals(J,t,n)}};r(J,"runtime",i),r(J,"typeName","games.Game"),r(J,"fields",i.util.newFieldList(()=>[{no:1,name:"id",kind:"scalar",T:9},{no:2,name:"name",kind:"scalar",T:9},{no:3,name:"createdAt",kind:"message",T:K}]));let N=J;const w=class w extends T{constructor(a){super(),i.util.initPartial(a,this)}static fromBinary(a,t){return new w().fromBinary(a,t)}static fromJson(a,t){return new w().fromJson(a,t)}static fromJsonString(a,t){return new w().fromJsonString(a,t)}static equals(a,t){return i.util.equals(w,a,t)}};r(w,"runtime",i),r(w,"typeName","games.EmptyReply"),r(w,"fields",i.util.newFieldList(()=>[]));let p=w;const X={typeName:"games.V1Games",methods:{getGame:{name:"GetGame",I:B,O:F,kind:S.Unary},getGames:{name:"GetGames",I:P,O:L,kind:S.Unary},createGame:{name:"CreateGame",I:x,O:p,kind:S.Unary},deleteGame:{name:"DeleteGame",I,O:p,kind:S.Unary},updateGame:{name:"UpdateGame",I:W,O:p,kind:S.Unary}}},h=V(X,z),Y=v("games",()=>{const e=M();async function a(k,o){return new Promise(s=>{h.getGames(new P({JWT:e.getToken(),limit:BigInt(k),offset:BigInt(o)})).then(y=>{const O=y;s([O.games,O.games.length,void 0])}).catch(y=>{console.log(y),s([void 0,0,"unable to get games"])})})}async function t(k){return new Promise(o=>{h.createGame(new x({JWT:e.getToken(),name:k})).then(()=>o(void 0)).catch(s=>{console.log(s),o("unable to create a new game")})})}async function n(k,o){return new Promise(s=>{h.updateGame(new W({JWT:e.getToken(),id:k,name:o})).then(()=>{s(void 0)}).catch(y=>{console.log(y),s("unable to update game")})})}async function U(k){return new Promise(o=>{h.getGame(new B({JWT:e.getToken(),id:k})).then(s=>{o([s.game,void 0])}).catch(s=>{console.log(s),o([void 0,"unable to get game"])})})}return{getGames:a,createGame:t,updateGame:n,getGame:U}});export{Y as u};
