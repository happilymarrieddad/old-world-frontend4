var v=Object.defineProperty;var V=(c,a,t)=>a in c?v(c,a,{enumerable:!0,configurable:!0,writable:!0,value:t}):c[a]=t;var e=(c,a,t)=>(V(c,typeof a!="symbol"?a+"":a,t),t);import{P as J,R as g,Q as i,S as k,T as K,U as Q,V as j,u as q}from"./index-Bk083lMD.js";import{a as C,U as B,D as F}from"./types_pb-D0QqgM2K.js";const m=class m extends J{constructor(t){super();e(this,"JWT","");e(this,"id","");e(this,"name","");e(this,"pointsPerModel",g.zero);e(this,"minModels",g.zero);e(this,"maxModels",g.zero);e(this,"troopTypeId","");e(this,"compositionTypeId","");e(this,"statistics",[]);i.util.initPartial(t,this)}static fromBinary(t,n){return new m().fromBinary(t,n)}static fromJson(t,n){return new m().fromJson(t,n)}static fromJsonString(t,n){return new m().fromJsonString(t,n)}static equals(t,n){return i.util.equals(m,t,n)}};e(m,"runtime",i),e(m,"typeName","unittypes.UpdateUnitTypeRequest"),e(m,"fields",i.util.newFieldList(()=>[{no:1,name:"JWT",kind:"scalar",T:9},{no:2,name:"id",kind:"scalar",T:9},{no:3,name:"name",kind:"scalar",T:9},{no:4,name:"pointsPerModel",kind:"scalar",T:3},{no:5,name:"minModels",kind:"scalar",T:3},{no:6,name:"maxModels",kind:"scalar",T:3},{no:7,name:"troopTypeId",kind:"scalar",T:9},{no:8,name:"compositionTypeId",kind:"scalar",T:9},{no:9,name:"statistics",kind:"message",T:C,repeated:!0}]));let M=m;const u=class u extends J{constructor(t){super();e(this,"JWT","");e(this,"armyTypeId","");i.util.initPartial(t,this)}static fromBinary(t,n){return new u().fromBinary(t,n)}static fromJson(t,n){return new u().fromJson(t,n)}static fromJsonString(t,n){return new u().fromJsonString(t,n)}static equals(t,n){return i.util.equals(u,t,n)}};e(u,"runtime",i),e(u,"typeName","unittypes.ArmyTypeIdRequest"),e(u,"fields",i.util.newFieldList(()=>[{no:1,name:"JWT",kind:"scalar",T:9},{no:2,name:"armyTypeId",kind:"scalar",T:9}]));let U=u;const l=class l extends J{constructor(t){super();e(this,"unitTypes",[]);i.util.initPartial(t,this)}static fromBinary(t,n){return new l().fromBinary(t,n)}static fromJson(t,n){return new l().fromJson(t,n)}static fromJsonString(t,n){return new l().fromJsonString(t,n)}static equals(t,n){return i.util.equals(l,t,n)}};e(l,"runtime",i),e(l,"typeName","unittypes.ArmyTypeIdReply"),e(l,"fields",i.util.newFieldList(()=>[{no:1,name:"unitTypes",kind:"message",T:B,repeated:!0}]));let x=l;const d=class d extends J{constructor(t){super();e(this,"JWT","");e(this,"id","");i.util.initPartial(t,this)}static fromBinary(t,n){return new d().fromBinary(t,n)}static fromJson(t,n){return new d().fromJson(t,n)}static fromJsonString(t,n){return new d().fromJsonString(t,n)}static equals(t,n){return i.util.equals(d,t,n)}};e(d,"runtime",i),e(d,"typeName","unittypes.GetUnitTypeRequest"),e(d,"fields",i.util.newFieldList(()=>[{no:1,name:"JWT",kind:"scalar",T:9},{no:2,name:"id",kind:"scalar",T:9}]));let h=d;const T=class T extends J{constructor(t){super();e(this,"JWT","");e(this,"armyTypeId","");e(this,"limit",g.zero);e(this,"offset",g.zero);e(this,"includeUnitTypeOptions",!1);i.util.initPartial(t,this)}static fromBinary(t,n){return new T().fromBinary(t,n)}static fromJson(t,n){return new T().fromJson(t,n)}static fromJsonString(t,n){return new T().fromJsonString(t,n)}static equals(t,n){return i.util.equals(T,t,n)}};e(T,"runtime",i),e(T,"typeName","unittypes.GetUnitTypesRequest"),e(T,"fields",i.util.newFieldList(()=>[{no:1,name:"JWT",kind:"scalar",T:9},{no:2,name:"armyTypeId",kind:"scalar",T:9},{no:3,name:"limit",kind:"scalar",T:3},{no:4,name:"offset",kind:"scalar",T:3},{no:5,name:"includeUnitTypeOptions",kind:"scalar",T:8}]));let S=T;const y=class y extends J{constructor(t){super();e(this,"unitTypes",[]);e(this,"count",g.zero);i.util.initPartial(t,this)}static fromBinary(t,n){return new y().fromBinary(t,n)}static fromJson(t,n){return new y().fromJson(t,n)}static fromJsonString(t,n){return new y().fromJsonString(t,n)}static equals(t,n){return i.util.equals(y,t,n)}};e(y,"runtime",i),e(y,"typeName","unittypes.GetUnitTypesReply"),e(y,"fields",i.util.newFieldList(()=>[{no:1,name:"unitTypes",kind:"message",T:B,repeated:!0},{no:2,name:"count",kind:"scalar",T:3}]));let b=y;const p=class p extends J{constructor(t){super();e(this,"JWT","");e(this,"name","");e(this,"gameId","");e(this,"armyTypeId","");e(this,"troopTypeId","");e(this,"compositionTypeId","");e(this,"pointsPerModel",g.zero);e(this,"minModels",g.zero);e(this,"maxModels",g.zero);e(this,"unitTypeId","");i.util.initPartial(t,this)}static fromBinary(t,n){return new p().fromBinary(t,n)}static fromJson(t,n){return new p().fromJson(t,n)}static fromJsonString(t,n){return new p().fromJsonString(t,n)}static equals(t,n){return i.util.equals(p,t,n)}};e(p,"runtime",i),e(p,"typeName","unittypes.CreateUnitTypeRequest"),e(p,"fields",i.util.newFieldList(()=>[{no:1,name:"JWT",kind:"scalar",T:9},{no:2,name:"name",kind:"scalar",T:9},{no:3,name:"gameId",kind:"scalar",T:9},{no:4,name:"armyTypeId",kind:"scalar",T:9},{no:5,name:"troopTypeId",kind:"scalar",T:9},{no:6,name:"compositionTypeId",kind:"scalar",T:9},{no:7,name:"pointsPerModel",kind:"scalar",T:3},{no:8,name:"minModels",kind:"scalar",T:3},{no:9,name:"maxModels",kind:"scalar",T:3},{no:10,name:"unitTypeId",kind:"scalar",T:9}]));let N=p;const f=class f extends J{constructor(a){super(),i.util.initPartial(a,this)}static fromBinary(a,t){return new f().fromBinary(a,t)}static fromJson(a,t){return new f().fromJson(a,t)}static fromJsonString(a,t){return new f().fromJsonString(a,t)}static equals(a,t){return i.util.equals(f,a,t)}};e(f,"runtime",i),e(f,"typeName","unittypes.EmptyReply"),e(f,"fields",i.util.newFieldList(()=>[]));let P=f;const H={typeName:"unittypes.V1UnitTypes",methods:{getUnitTypes:{name:"GetUnitTypes",I:S,O:b,kind:k.Unary},getUnitType:{name:"GetUnitType",I:h,O:B,kind:k.Unary},createUnitType:{name:"CreateUnitType",I:N,O:B,kind:k.Unary},updateUnitType:{name:"UpdateUnitType",I:M,O:P,kind:k.Unary},deleteUnitType:{name:"DeleteUnitType",I:F,O:P,kind:k.Unary},getBasicUnitTypesByArmyTypeID:{name:"GetBasicUnitTypesByArmyTypeID",I:U,O:x,kind:k.Unary}}},w=K(H,j),$=Q("unitTypes",()=>{const c=q();async function a(o,s,r){return console.log("attempting to get unit types"),new Promise(I=>{w.getUnitTypes(new S({armyTypeId:o,limit:BigInt(s),offset:BigInt(r>1?(r-1)*s:0),JWT:c.getToken()})).then(W=>{const z=W;I([z.unitTypes,Number(z.count),void 0])}).catch(W=>{console.table(W),I([void 0,0,"unable to get unit games"])})})}async function t(o){return new Promise(s=>{o.JWT=c.getToken(),w.createUnitType(o).then(()=>{s(void 0)}).catch(r=>{console.table(r),s("unable to create a new unit type")})})}async function n(o){return new Promise(s=>{w.getBasicUnitTypesByArmyTypeID(new U({armyTypeId:o,JWT:c.getToken()})).then(r=>s([r.unitTypes,void 0])).catch(r=>{console.table(r),s([void 0,"unable to get unit type names by army type id"])})})}async function L(o){return new Promise(s=>{w.getUnitType(new h({JWT:c.getToken(),id:o})).then(r=>{s([r,void 0])}).catch(r=>{console.log(r),s([void 0,"unable to get unit type"])})})}async function O(o){return new Promise(s=>{w.deleteUnitType(new F({JWT:c.getToken(),id:o})).then(()=>s(void 0)).catch(r=>{console.log(r),s("unable to destroy unit type")})})}async function D(o){return new Promise(s=>{o.JWT=c.getToken(),w.updateUnitType(o).then(()=>{s(void 0)}).catch(r=>{console.log(r),s("unable to update unit type")})})}return{getUnitTypes:a,createUnitType:t,getUnitTypeNamesFromArmyTypeId:n,getUnitType:L,destroyUnitType:O,updateUnitType:D}});export{N as C,M as U,$ as u};
