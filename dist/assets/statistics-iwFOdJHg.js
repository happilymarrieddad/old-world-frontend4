var U=Object.defineProperty;var z=(e,a,t)=>a in e?U(e,a,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[a]=t;var i=(e,a,t)=>(z(e,typeof a!="symbol"?a+"":a,t),t);import{R as w,S as s,T as B,U as S,V as A,W as V,X as v,u as M}from"./index-NHNacFVT.js";import{T as K}from"./timestamp_pb-DpX4yl5v.js";const m=class m extends w{constructor(t){super();i(this,"JWT","");i(this,"id","");s.util.initPartial(t,this)}static fromBinary(t,n){return new m().fromBinary(t,n)}static fromJson(t,n){return new m().fromJson(t,n)}static fromJsonString(t,n){return new m().fromJsonString(t,n)}static equals(t,n){return s.util.equals(m,t,n)}};i(m,"runtime",s),i(m,"typeName","statistics.GetStatisticRequest"),i(m,"fields",s.util.newFieldList(()=>[{no:1,name:"JWT",kind:"scalar",T:9},{no:2,name:"id",kind:"scalar",T:9}]));let W=m;const l=class l extends w{constructor(t){super();i(this,"JWT","");i(this,"gameId","");i(this,"limit",B.zero);i(this,"offset",B.zero);s.util.initPartial(t,this)}static fromBinary(t,n){return new l().fromBinary(t,n)}static fromJson(t,n){return new l().fromJson(t,n)}static fromJsonString(t,n){return new l().fromJsonString(t,n)}static equals(t,n){return s.util.equals(l,t,n)}};i(l,"runtime",s),i(l,"typeName","statistics.GetStatisticsRequest"),i(l,"fields",s.util.newFieldList(()=>[{no:1,name:"JWT",kind:"scalar",T:9},{no:2,name:"gameId",kind:"scalar",T:9},{no:3,name:"limit",kind:"scalar",T:3},{no:4,name:"offset",kind:"scalar",T:3}]));let I=l;const u=class u extends w{constructor(t){super();i(this,"statistics",[]);i(this,"count",B.zero);s.util.initPartial(t,this)}static fromBinary(t,n){return new u().fromBinary(t,n)}static fromJson(t,n){return new u().fromJson(t,n)}static fromJsonString(t,n){return new u().fromJsonString(t,n)}static equals(t,n){return s.util.equals(u,t,n)}};i(u,"runtime",s),i(u,"typeName","statistics.GetStatisticsReply"),i(u,"fields",s.util.newFieldList(()=>[{no:1,name:"statistics",kind:"message",T:k,repeated:!0},{no:2,name:"count",kind:"scalar",T:3}]));let N=u;const d=class d extends w{constructor(t){super();i(this,"JWT","");i(this,"name","");i(this,"display","");i(this,"gameId","");s.util.initPartial(t,this)}static fromBinary(t,n){return new d().fromBinary(t,n)}static fromJson(t,n){return new d().fromJson(t,n)}static fromJsonString(t,n){return new d().fromJsonString(t,n)}static equals(t,n){return s.util.equals(d,t,n)}};i(d,"runtime",s),i(d,"typeName","statistics.CreateStatisticRequest"),i(d,"fields",s.util.newFieldList(()=>[{no:1,name:"JWT",kind:"scalar",T:9},{no:2,name:"name",kind:"scalar",T:9},{no:3,name:"display",kind:"scalar",T:9},{no:4,name:"gameId",kind:"scalar",T:9}]));let P=d;const f=class f extends w{constructor(t){super();i(this,"JWT","");i(this,"id","");i(this,"name","");i(this,"display","");s.util.initPartial(t,this)}static fromBinary(t,n){return new f().fromBinary(t,n)}static fromJson(t,n){return new f().fromJson(t,n)}static fromJsonString(t,n){return new f().fromJsonString(t,n)}static equals(t,n){return s.util.equals(f,t,n)}};i(f,"runtime",s),i(f,"typeName","statistics.UpdateStatisticRequest"),i(f,"fields",s.util.newFieldList(()=>[{no:1,name:"JWT",kind:"scalar",T:9},{no:2,name:"id",kind:"scalar",T:9},{no:3,name:"name",kind:"scalar",T:9},{no:4,name:"display",kind:"scalar",T:9}]));let F=f;const J=class J extends w{constructor(t){super();i(this,"JWT","");i(this,"id","");s.util.initPartial(t,this)}static fromBinary(t,n){return new J().fromBinary(t,n)}static fromJson(t,n){return new J().fromJson(t,n)}static fromJsonString(t,n){return new J().fromJsonString(t,n)}static equals(t,n){return s.util.equals(J,t,n)}};i(J,"runtime",s),i(J,"typeName","statistics.DeleteStatisticRequest"),i(J,"fields",s.util.newFieldList(()=>[{no:1,name:"JWT",kind:"scalar",T:9},{no:2,name:"id",kind:"scalar",T:9}]));let x=J;const T=class T extends w{constructor(t){super();i(this,"id","");i(this,"name","");i(this,"display","");i(this,"gameId","");i(this,"createdAt");i(this,"position",B.zero);s.util.initPartial(t,this)}static fromBinary(t,n){return new T().fromBinary(t,n)}static fromJson(t,n){return new T().fromJson(t,n)}static fromJsonString(t,n){return new T().fromJsonString(t,n)}static equals(t,n){return s.util.equals(T,t,n)}};i(T,"runtime",s),i(T,"typeName","statistics.Statistic"),i(T,"fields",s.util.newFieldList(()=>[{no:1,name:"id",kind:"scalar",T:9},{no:2,name:"name",kind:"scalar",T:9},{no:3,name:"display",kind:"scalar",T:9},{no:4,name:"gameId",kind:"scalar",T:9},{no:5,name:"createdAt",kind:"message",T:K},{no:6,name:"position",kind:"scalar",T:3}]));let k=T;const g=class g extends w{constructor(a){super(),s.util.initPartial(a,this)}static fromBinary(a,t){return new g().fromBinary(a,t)}static fromJson(a,t){return new g().fromJson(a,t)}static fromJsonString(a,t){return new g().fromJsonString(a,t)}static equals(a,t){return s.util.equals(g,a,t)}};i(g,"runtime",s),i(g,"typeName","statistics.EmptyReply"),i(g,"fields",s.util.newFieldList(()=>[]));let L=g;const X={typeName:"statistics.V1Statistics",methods:{getStatistics:{name:"GetStatistics",I,O:N,kind:S.Unary},getStatistic:{name:"GetStatistic",I:W,O:k,kind:S.Unary},createStatistic:{name:"CreateStatistic",I:P,O:k,kind:S.Unary},updateStatistic:{name:"UpdateStatistic",I:F,O:k,kind:S.Unary},deleteStatistic:{name:"DeleteStatistic",I:x,O:L,kind:S.Unary}}},h=A(X,v),Y=V("statistics",()=>{const e=M();async function a(c,r,o){return new Promise(y=>{h.getStatistics(new I({JWT:e.getToken(),gameId:c,limit:BigInt(r),offset:BigInt(o)})).then(p=>{y([p.statistics,void 0])}).catch(p=>{console.log(p),y([void 0,"unable to get statistics"])})})}async function t(c){return new Promise(r=>{h.getStatistic(new W({JWT:e.getToken(),id:c})).then(o=>{r([o,void 0])}).catch(o=>{console.log(o),r([void 0,"unable to get statistic"])})})}async function n(c){return new Promise(r=>{c.JWT=e.getToken(),h.updateStatistic(c).then(()=>r(void 0)).catch(o=>{console.log(o),r("unable to update statistic")})})}async function b(c,r,o){return new Promise(y=>{h.createStatistic(new P({JWT:e.getToken(),name:c,display:r,gameId:o})).then(()=>{y(void 0)}).catch(p=>{console.log(p),y("unable to create a statistic")})})}async function O(c){return new Promise(r=>{h.deleteStatistic(new x({JWT:e.getToken(),id:c})).then(()=>{r(void 0)}).catch(o=>{console.log(o),r("unable to delete a statistic")})})}return{getStatistics:a,getStatistic:t,updateStatistic:n,createStatistic:b,deleteStatistic:O}});export{F as U,Y as u};
